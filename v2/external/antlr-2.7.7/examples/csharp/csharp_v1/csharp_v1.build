<?xml version="1.0"?>
<project name="KCSParse" default="test">
    <tstamp/>
    <property name="debug" value="true"/>
    <property name="project.name" value="CSharp v1 Grammar Sample for ANTLR"/>
    <property name="project.FormalName" value="KCSParse"/>

    <property name="src.dir" value="."/>
    <property name="build.dir" value="bin"/>
    <property name="antlr.dir" value="..\..\.."/>
    
    <echo message="Building project: '${project.name}'"/>

    <target name="clean" description="cleans up everything">
        <echo message="Deleting directory '${build.dir}': You should rebuild VS.NET project in '${build.dir}\..'."/>
        <delete file="UnicodeLexerBase.cs" failonerror="false"/>
        <delete file="UnicodeLexerBaseTokenTypes.cs" failonerror="false"/>
        <delete file="UnicodeLexerBaseTokenTypes.txt" failonerror="false"/>
        
        <delete file="expandedCSharpLexerBase.g" failonerror="false"/>
        <delete file="CSharpLexerBase.cs" failonerror="false"/>
        <delete file="CSharpLexerBaseTokenTypes.cs" failonerror="false"/>
        <delete file="CSharpLexerBaseTokenTypes.txt" failonerror="false"/>
        
        <delete file="expandedCSharpLexer.g" failonerror="false"/>
        <delete file="CSharpLexer.cs" failonerror="false"/>
        <delete file="CSharpLexerTokenTypes.cs" failonerror="false"/>
        <delete file="CSharpLexerTokenTypes.txt" failonerror="false"/>
        
        <delete file="expandedCSharpPreprocessorLexer.g" failonerror="false"/>
        <delete file="CSharpPreprocessorLexer.cs" failonerror="false"/>
        <delete file="CSharpPreprocessTokenTypes.cs" failonerror="false"/>
        <delete file="CSharpPreprocessTokenTypes.txt" failonerror="false"/>
        
        <delete file="expandedCSharpPreprocessorHooverLexer.g" failonerror="false"/>
        <delete file="CSharpPreprocessorHooverLexer.cs" failonerror="false"/>
        <delete file="CSharpHooverTokenTypes.cs" failonerror="false"/>
        <delete file="CSharpHooverTokenTypes.txt" failonerror="false"/>
        
        <delete file="CSharpParser.cs" failonerror="false"/>
        <delete file="CSharpTokenTypes.cs" failonerror="false"/>
        <delete file="CSharpTokenTypes.txt" failonerror="false"/>
        
        <delete file="CSharpPrettyPrinter.cs" failonerror="false"/>
        <delete file="CSharpPrettyPrinterTokenTypes.cs" failonerror="false"/>
        <delete file="CSharpPrettyPrinterTokenTypes.txt" failonerror="false"/>

        <delete dir="${build.dir}" failonerror="false"/>
    </target>

    <target name="generate" description="calls ANTLR to generate Lexers/Parsers">    	
        <exec program="java.exe" commandline="-cp ${antlr.dir} antlr.Tool UnicodeLexerBase.g" failonerror="true"/>
        <exec program="java.exe" commandline="-cp ${antlr.dir} antlr.Tool -glib UnicodeLexerBase.g CSharpLexerBase.g " failonerror="true"/>
        <exec program="java.exe" commandline="-cp ${antlr.dir} antlr.Tool -glib UnicodeLexerBase.g;CSharpLexerBase.g  CSharpLexer.g                  " failonerror="true"/>
        <exec program="java.exe" commandline="-cp ${antlr.dir} antlr.Tool -glib UnicodeLexerBase.g;CSharpLexerBase.g  CSharpPreprocessorLexer.g      " failonerror="true"/>
        <exec program="java.exe" commandline="-cp ${antlr.dir} antlr.Tool -glib UnicodeLexerBase.g;CSharpLexerBase.g  CSharpPreprocessorHooverLexer.g" failonerror="true"/>
        <exec program="java.exe" commandline="-cp ${antlr.dir} antlr.Tool CSharpParser.g" failonerror="true"/>
        <exec program="java.exe" commandline="-cp ${antlr.dir} antlr.Tool CSharpPrettyPrinter.g" failonerror="true"/>

        <exec program="Tools\csflex.exe" commandline="-nested --csharp csharp.flex" failonerror="true"/>
    </target>

    <target name="release" depends="clean" description="build non-debug version">
        <!-- build a clean release distribution for release -->
        <property name="debug" value="false"/>
        <echo message="Debug = ${debug}"/>
        <call target="build"/>
    </target>
    
    <target name="build" depends="generate" description="compiles the source code">
        <mkdir dir="${build.dir}"/>
        <!-- copy the assemblies required to build example to the build folder -->
        <copy file="${antlr.dir}\lib\csharp\antlr.runtime\bin\antlr.runtime.dll" tofile="${build.dir}\antlr.runtime.dll" />
        <copy file="${antlr.dir}\lib\csharp\antlr.astframe\bin\antlr.astframe.dll" tofile="${build.dir}\antlr.astframe.dll" />

        <!-- compile example's ${project.name}.exe -->
        <csc target="exe" output="${build.dir}\${project.FormalName}.exe" debug="${debug}">
            <sources basedir="${src.dir}">
                <includes name="*.cs"/>
            </sources>
            <references>
                <includes name="${build.dir}\antlr.runtime.dll"/>
                <includes name="${build.dir}\antlr.astframe.dll"/>
            </references>
            <arg value="/nowarn:1591"/>
        </csc>
    </target>

    <!--
        Perform unit tests.  If a unit test fails, the build fails.
        The base directory is set to the Test directory so that tests can easily
        load external data files wihtout having to worry about complicated paths.
    -->

    <target name="test" depends="build" description="run unit tests">
        <exec program="${build.dir}\${project.FormalName}.exe" commandline=" -flex ${src.dir}\testfiles\AllCSharpConstructs.cs" failonerror="true"/>        
        <exec program="${build.dir}\${project.FormalName}.exe" commandline=" -showtree ${src.dir}\testfiles\AllCSharpConstructs.cs" failonerror="true"/>        
    </target>
</project>
