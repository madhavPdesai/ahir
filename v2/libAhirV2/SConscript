import os

env = Environment(ENV = {'PATH' : os.environ['PATH']})
ANTLR_PATH=os.environ['ANTLR_PATH']
ANTLR_LIB_PATH= ANTLR_PATH + '/lib/'

SConscript(['grammar/SConscript'])

#env.Append(CPPPATH=ANTLR_INCLUDE) 
#env.Append(CPPPATH='./src/:./include:' + ANTLR_PATH)
env.Append(CPPPATH = './src/:./include:../BGLWrap/include:/usr/local/include/:' + ANTLR_PATH)


VariantDir('obj','src',duplicate=0)

env.Library('lib/libVC', Glob('obj/*.cpp'), CCFLAGS=' -g ')
env.Program('bin/vcParse', 'util/vcParseMain.cpp', CCFLAGS='-g ',LINKFLAGS='-g ', LIBS=['VC', 'antlr' ], LIBPATH=Split('/usr/local/lib/  /usr/local/lib/llvm ./lib/ ' + ANTLR_LIB_PATH))
env.Program('bin/vcAnalyze', 'util/vcAnalyze.cpp', CCFLAGS='-g ',LINKFLAGS='-g ', LIBS=['VC', 'antlr' ], LIBPATH=Split('/usr/local/lib/ ./lib/ ' + ANTLR_LIB_PATH ))
env.Program('bin/vcFormat', 'util/vcFormat.cpp',CCFLAGS='-g ', LINKFLAGS='-g ')
env.Program('bin/vhdlFormat', 'util/vhdlFormat.cpp',CCFLAGS='-g ', LINKFLAGS='-g ')
env.Program('bin/vc2vhdl', 'util/vc2vhdl.cpp', CCFLAGS='-g ',LINKFLAGS='-g ', LIBS=['VC', 'antlr' ], LIBPATH=Split('/usr/local/lib/ ./lib/ ' + ANTLR_LIB_PATH))

