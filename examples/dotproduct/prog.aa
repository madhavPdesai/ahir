$storage  a: $array [16] $of $float<8,23>
$storage  b: $array [16] $of $float<8,23>
$storage  a1: $array [16] $of $float<8,23>
$storage  b1: $array [16] $of $float<8,23>

$module [init] $in() $out () $is
{
	$branchblock[init] {
		$merge $entry loopback
			$phi I := ($bitcast($uint<32>) 0) $on $entry NI $on loopback
		$endmerge
		a[I]  := ($cast ($float<8,23>) I )
		b[I]  := ($cast ($float<8,23>) I )
		a1[I]  := ($cast ($float<8,23>) I )
		b1[I]  := ($cast ($float<8,23>) I )
		NI    := (I+1)
		$if (NI < 16) $then $place [loopback] $endif
	}
}

$module [dotp_experimental] $in() $out (c: $float<8,23> ) $is
{
	$branchblock[run] {
		$dopipeline $depth 31 
			$merge $entry $loopback
			$phi I := ($bitcast($uint<32>) 0) $on $entry NI $on $loopback
			$phi sum := ($bitcast($float<8,23>) _f0.0e+1) $on $entry nsum $on $loopback
			$endmerge
			NI := (I+4)
                        I1 := (I+1)
                        I2 := (I+2)
                        I3 := (I+3)
			pptr := @(a[I]) ppptr := @(a[I1]) pppptr := @(a[I2]) ppppptr := @(a[I3]) 
			qqtr := @(b[I]) qqqtr := @(b[I1]) qqqqtr := @(b[I2]) qqqqqtr := @(b[I3]) 
			p  := ->(pptr)  pp := ->(ppptr) ppp := ->(pppptr) pppp := ->(ppppptr)
			q  := ->(qqtr)  qq := ->(qqqtr) qqq := ->(qqqqtr) qqqq := ->(qqqqqtr)
			r  := (p*q) rr := (pp*qq) rrr := (ppp*qqq) rrrr := (pppp*qqqq)
			rsum := ((r + rr) + (rrr+rrrr))
                        nsum := (rsum + sum)
		$while (NI < 16)

	} (nsum => sum)

	c := sum
}

$module [dotp_pipelined_unrolled] $in() $out (c: $float<8,23> ) $is
{

	$branchblock[run] {
		$dopipeline $depth 31 $fullrate
			$merge $entry $loopback
			$phi I := ($bitcast($uint<32>) 0) $on $entry NI $on $loopback
			$phi sum := ($bitcast($float<8,23>) _f0.0e+1) $on $entry nsum $on $loopback
			$endmerge
			NI := (I+4)
                        I1 := (I+1)
                        I2 := (I+2)
                        I3 := (I+3)
			p  := a[I]  pp := a[I1] ppp := a[I2] pppp := a[I3]
			q  := b[I]  qq := b[I1] qqq := b[I2] qqqq := b[I3]
			r  := (p*q) rr := (pp*qq) rrr := (ppp*qqq) rrrr := (pppp*qqqq)
			rsum := ((r + rr) + (rrr+rrrr))
			nsum := (sum + rsum)
		$while (NI < 16)

	}  (nsum => sum)

	c := sum
}

$module [dotp_nonpipelined_unrolled] $in() $out (c: $float<8,23> ) $is
{

	$branchblock[run] {
		$merge $entry loopback
		$phi I := ($bitcast($uint<32>) 0) $on $entry NI $on loopback
		$phi sum := ($bitcast($float<8,23>) _f0.0e+1) $on $entry nsum $on loopback
		$endmerge
		NI := (I+4)
                I1 := (I+1)
                I2 := (I+2)
                I3 := (I+3)
		p  := a[I]  pp := a[I1] ppp := a[I2] pppp := a[I3]
		q  := b[I]  qq := b[I1] qqq := b[I2] qqqq := b[I3]
		r  := (p*q) rr := (pp*qq) rrr := (ppp*qqq) rrrr := (pppp*qqqq)
		rsum := ((r + rr) + (rrr+rrrr))
		nsum := (sum + rsum)
		$if (NI < 16) $then $place [loopback] $endif
	} (nsum => sum)

	c := sum
}

$module [dotp_pipelined] $in() $out (c: $float<8,23> ) $is
{

	$branchblock[run] {
	   $dopipeline $depth 31 $fullrate
		$merge $entry $loopback
		$phi I := ($bitcast($uint<32>) 0) $on $entry NI $on $loopback
		$phi sum := ($bitcast($float<8,23>) _f0.0e+1) $on $entry nsum $on $loopback
		$endmerge
		NI := (I+1)
		p  := a1[I]
		q  := b1[I]
		r  := (p*q)
		nsum := (sum + r)
           $while (NI < 16) 
	} (nsum => sum)

	c := sum
}

$module [dotp_nonpipelined] $in() $out (c: $float<8,23> ) $is
{

	$branchblock[run] {
		$merge $entry loopback
		$phi I := ($bitcast($uint<32>) 0) $on $entry NI $on loopback
		$phi sum := ($bitcast($float<8,23>) _f0.0e+1) $on $entry nsum $on loopback
		$endmerge
		NI := (I+1)
		p  := a1[I]
		q  := b1[I]
		r  := (p*q)
		nsum := (sum + r)
		$if (NI < 16) $then $place [loopback] $endif
	} (nsum => sum)

	c := sum
}

