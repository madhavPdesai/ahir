// Virtual circuit produced from Aa description by Aa2VC 
// $pipe  A : $uint<32>  $depth 1 
// can point into 

// in scope  top-level
$pipe [A] 32 $depth 1 
// $pipe  TMP : $uint<32>  $depth 1 
// can point into 

// in scope  top-level
$pipe [TMP] 32 $depth 1 
// load store constants for object default_mem_pool
$constant $W[default_mem_pool_base_address] : $int<1> := _b0
// Declared gated clocks.
$memoryspace [memory_space_1] {$capacity 1
$datawidth 8
$addrwidth 1
$maxaccesswidth 8
// $storage  default_mem_pool : $array[1] $of $uint<8> // memory space index = 1  base address = 0  word size = 8
// can point into  mempool

// in scope  top-level
$object [default_mem_pool] : $array[1] $of $int<8>
}
$module [global_storage_initializer_] {


// pipe-declarations for block %global_storage_initializer_
//  file ./.Aa//linked.opt.aa, line 7
// there are no memory spaces local to this module.
$CP { // begin control-path 
} // end control-path
$DP { // begin data-path 
// constant-object-declarations for block %global_storage_initializer_
//  file ./.Aa//linked.opt.aa, line 7
} // end data-path
}
$module [mem_load__] {
$in address:$int<32>
// can point into  mempool

$out data:$int<8>
// can point into  mempool

// pipe-declarations for block %mem_load__
//  file ./.Aa//linked.opt.aa, line 14
// memory-space 1 is read from.
// there are no memory spaces local to this module.
$CP { // begin control-path 
::[assign_stmt_21] {
// start:  	data := default_mem_pool[((address * 1 ) + 0 )] $buffering 1// bits of buffering = 8. 

//  file ./.Aa//linked.opt.aa, line 19
// Source expression
// default_mem_pool[((address * 1 ) + 0 )]
$T[array_obj_ref_20_sample_start_] 
$T[array_obj_ref_20_sample_completed_] 
$T[array_obj_ref_20_update_start_] 
$T[array_obj_ref_20_update_completed_] 
$T[array_obj_ref_20_word_address_calculated] 
$T[array_obj_ref_20_root_address_calculated] 
$T[array_obj_ref_20_offset_calculated] 
$T[array_obj_ref_20_index_resized_0] 
$T[array_obj_ref_20_index_scaled_0] 
$T[array_obj_ref_20_index_computed_0] 
// ((address * 1 ) + 0 )
// (address * 1 )
// address
// start: Forward dependencies from ((address * 1 ) + 0 ) to transition array_obj_ref_20_index_computed_0
// done: Forward dependencies from ((address * 1 ) + 0 ) to transition array_obj_ref_20_index_computed_0
;;[array_obj_ref_20_index_resize_0] {
$T [index_resize_req] $T [index_resize_ack] // resize index to address-width
}
array_obj_ref_20_index_computed_0 &-> (array_obj_ref_20_index_resize_0)
array_obj_ref_20_index_resized_0 <-& (array_obj_ref_20_index_resize_0)
;;[array_obj_ref_20_index_scale_0] {
$T [scale_rename_req] $T [scale_rename_ack] // rename 
}
array_obj_ref_20_index_resized_0 &-> (array_obj_ref_20_index_scale_0)
array_obj_ref_20_index_scaled_0 <-& (array_obj_ref_20_index_scale_0)
;;[array_obj_ref_20_final_index_sum_regn] {
$T [req] $T [ack] // rename
}
array_obj_ref_20_index_scaled_0 &-> (array_obj_ref_20_final_index_sum_regn)
array_obj_ref_20_offset_calculated <-& (array_obj_ref_20_final_index_sum_regn)
;;[array_obj_ref_20_base_plus_offset] {
$T [sum_rename_req] $T [sum_rename_ack] // one gets through 
}
array_obj_ref_20_offset_calculated &-> (array_obj_ref_20_base_plus_offset)
array_obj_ref_20_root_address_calculated <-& (array_obj_ref_20_base_plus_offset)
;;[array_obj_ref_20_word_addrgen] {
$T [root_register_req] $T [root_register_ack]
}
array_obj_ref_20_root_address_calculated &-> (array_obj_ref_20_word_addrgen)
array_obj_ref_20_word_address_calculated <-& (array_obj_ref_20_word_addrgen)
;;[array_obj_ref_20_Sample] {
||[word_access_start] {
;;[word_0] {
$T [rr] $T [ra] 
}
}
}
;;[array_obj_ref_20_Update] {
||[word_access_complete] {
;;[word_0] {
$T [cr] $T [ca] 
}
}
;;[array_obj_ref_20_Merge] {
$T [merge_req] $T [merge_ack]
}
}
array_obj_ref_20_sample_start_ <-& (array_obj_ref_20_word_address_calculated)
array_obj_ref_20_sample_start_ &-> (array_obj_ref_20_Sample)
array_obj_ref_20_sample_completed_ <-& (array_obj_ref_20_Sample)
array_obj_ref_20_sample_completed_ &-> ($null)
array_obj_ref_20_update_start_ &-> (array_obj_ref_20_Update)
array_obj_ref_20_update_completed_ <-& (array_obj_ref_20_Update)
// Target expression
// (as target) data
// data
// write to interface object
// start: WAR dependencies for data
// done: WAR dependencies for data
// data
// write to interface object
// end:  	data := default_mem_pool[((address * 1 ) + 0 )] $buffering 1// bits of buffering = 8. 

// load-store dependencies..
// memory-space  memory_space_1
//  array_obj_ref_20 load
}
} // end control-path
$DP { // begin data-path 
// constant-object-declarations for block %mem_load__
//  file ./.Aa//linked.opt.aa, line 14
// default_mem_pool[((address * 1 ) + 0 )]
// 1 
$constant $W[konst_16_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
// 0 
$constant $W[konst_18_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
$constant $W[array_obj_ref_20_resized_base_address] : $int<1> := _b0// 0
$constant $W[array_obj_ref_20_offset_scale_factor_0] : $int<1> := _b1// 1
$constant $W[array_obj_ref_20_word_offset_0] : $int<1> := _b0// 0
// 	data := default_mem_pool[((address * 1 ) + 0 )] $buffering 1// bits of buffering = 8. 

//  file ./.Aa//linked.opt.aa, line 19
// default_mem_pool[((address * 1 ) + 0 )]
// (address * 1 )
$intermediate $W[MUL_u32_u32_17_wire] : $int<32>
// ((address * 1 ) + 0 )
$intermediate $W[ADD_u32_u32_19_wire] : $int<32>
$intermediate $W[ADD_u32_u32_19_resized] : $int<1>
$intermediate $W[ADD_u32_u32_19_scaled] : $int<1>
$intermediate $W[array_obj_ref_20_final_offset] : $int<1>
$intermediate $W[array_obj_ref_20_root_address] : $int<1>
$W[array_obj_ref_20_word_address_0] : $pointer<memory_space_1>
$W[array_obj_ref_20_data_0] : $int<8>
// data
// 	data := default_mem_pool[((address * 1 ) + 0 )] $buffering 1// bits of buffering = 8. 

//  file ./.Aa//linked.opt.aa, line 19
// default_mem_pool[((address * 1 ) + 0 )]
// (address * 1 )
*[MUL_u32_u32_17_inst] (address konst_16_wire_constant) (MUL_u32_u32_17_wire)   $flowthrough 
$delay MUL_u32_u32_17_inst 0
// ((address * 1 ) + 0 )
+[ADD_u32_u32_19_inst] (MUL_u32_u32_17_wire konst_18_wire_constant) (ADD_u32_u32_19_wire)   $flowthrough 
$delay ADD_u32_u32_19_inst 0
&/ [array_obj_ref_20_index_0_resize] (ADD_u32_u32_19_wire) (ADD_u32_u32_19_resized) 
 $flowthrough 
&/ [array_obj_ref_20_index_0_rename] (ADD_u32_u32_19_resized) (ADD_u32_u32_19_scaled) 
 $flowthrough 
&/ [array_obj_ref_20_index_offset] (ADD_u32_u32_19_scaled) (array_obj_ref_20_final_offset) 
 $flowthrough 
&/ [array_obj_ref_20_root_address_inst] (array_obj_ref_20_final_offset) (array_obj_ref_20_root_address) 
 $flowthrough 
&/ [array_obj_ref_20_addr_0] (array_obj_ref_20_root_address) (array_obj_ref_20_word_address_0) 
 $flowthrough 
$load [array_obj_ref_20_load_0] $from memory_space_1 (array_obj_ref_20_word_address_0) (array_obj_ref_20_data_0) 
$delay array_obj_ref_20_load_0 4
&/ [array_obj_ref_20_gather_scatter] (array_obj_ref_20_data_0) (data) 
 $flowthrough 
} // end data-path
// 	data := default_mem_pool[((address * 1 ) + 0 )] $buffering 1// bits of buffering = 8. 

//  file ./.Aa//linked.opt.aa, line 19
// default_mem_pool[((address * 1 ) + 0 )]
// ((address * 1 ) + 0 )
// (address * 1 )
// address
array_obj_ref_20_index_0_resize <=> (assign_stmt_21/array_obj_ref_20_index_resize_0/index_resize_req) (assign_stmt_21/array_obj_ref_20_index_resize_0/index_resize_ack)
array_obj_ref_20_index_0_rename <=> (assign_stmt_21/array_obj_ref_20_index_scale_0/scale_rename_req) (assign_stmt_21/array_obj_ref_20_index_scale_0/scale_rename_ack)
array_obj_ref_20_index_offset <=> (assign_stmt_21/array_obj_ref_20_final_index_sum_regn/req) (assign_stmt_21/array_obj_ref_20_final_index_sum_regn/ack)
array_obj_ref_20_root_address_inst <=> (assign_stmt_21/array_obj_ref_20_base_plus_offset/sum_rename_req) (assign_stmt_21/array_obj_ref_20_base_plus_offset/sum_rename_ack)
array_obj_ref_20_addr_0 <=> (assign_stmt_21/array_obj_ref_20_word_addrgen/root_register_req) (assign_stmt_21/array_obj_ref_20_word_addrgen/root_register_ack)
array_obj_ref_20_gather_scatter <=> (assign_stmt_21/array_obj_ref_20_Update/array_obj_ref_20_Merge/merge_req) (assign_stmt_21/array_obj_ref_20_Update/array_obj_ref_20_Merge/merge_ack)
array_obj_ref_20_load_0 <=> (assign_stmt_21/array_obj_ref_20_Sample/word_access_start/word_0/rr assign_stmt_21/array_obj_ref_20_Update/word_access_complete/word_0/cr) (assign_stmt_21/array_obj_ref_20_Sample/word_access_start/word_0/ra assign_stmt_21/array_obj_ref_20_Update/word_access_complete/word_0/ca)
}
$module [mem_store__] {
$in address:$int<32>
// can point into  mempool
 data:$int<8>
// can point into  mempool


// pipe-declarations for block %mem_store__
//  file ./.Aa//linked.opt.aa, line 21
// memory-space 1 is written into.
// there are no memory spaces local to this module.
$CP { // begin control-path 
::[assign_stmt_33] {
// start:  	default_mem_pool[((address * 1 ) + 0 )] := data $buffering 1// bits of buffering = 8. 

//  file ./.Aa//linked.opt.aa, line 26
// Source expression
// data
// Target expression
// default_mem_pool[((address * 1 ) + 0 )]
$T[array_obj_ref_31_sample_start_] 
$T[array_obj_ref_31_sample_completed_] 
$T[array_obj_ref_31_update_start_] 
$T[array_obj_ref_31_update_completed_] 
$T[array_obj_ref_31_word_address_calculated] 
$T[array_obj_ref_31_root_address_calculated] 
$T[array_obj_ref_31_offset_calculated] 
$T[array_obj_ref_31_index_resized_0] 
$T[array_obj_ref_31_index_scaled_0] 
$T[array_obj_ref_31_index_computed_0] 
// ((address * 1 ) + 0 )
// (address * 1 )
// address
// start: Forward dependencies from ((address * 1 ) + 0 ) to transition array_obj_ref_31_index_computed_0
// done: Forward dependencies from ((address * 1 ) + 0 ) to transition array_obj_ref_31_index_computed_0
;;[array_obj_ref_31_index_resize_0] {
$T [index_resize_req] $T [index_resize_ack] // resize index to address-width
}
array_obj_ref_31_index_computed_0 &-> (array_obj_ref_31_index_resize_0)
array_obj_ref_31_index_resized_0 <-& (array_obj_ref_31_index_resize_0)
;;[array_obj_ref_31_index_scale_0] {
$T [scale_rename_req] $T [scale_rename_ack] // rename 
}
array_obj_ref_31_index_resized_0 &-> (array_obj_ref_31_index_scale_0)
array_obj_ref_31_index_scaled_0 <-& (array_obj_ref_31_index_scale_0)
;;[array_obj_ref_31_final_index_sum_regn] {
$T [req] $T [ack] // rename
}
array_obj_ref_31_index_scaled_0 &-> (array_obj_ref_31_final_index_sum_regn)
array_obj_ref_31_offset_calculated <-& (array_obj_ref_31_final_index_sum_regn)
;;[array_obj_ref_31_base_plus_offset] {
$T [sum_rename_req] $T [sum_rename_ack] // one gets through 
}
array_obj_ref_31_offset_calculated &-> (array_obj_ref_31_base_plus_offset)
array_obj_ref_31_root_address_calculated <-& (array_obj_ref_31_base_plus_offset)
;;[array_obj_ref_31_word_addrgen] {
$T [root_register_req] $T [root_register_ack]
}
array_obj_ref_31_root_address_calculated &-> (array_obj_ref_31_word_addrgen)
array_obj_ref_31_word_address_calculated <-& (array_obj_ref_31_word_addrgen)
;;[array_obj_ref_31_Sample] {
;;[array_obj_ref_31_Split] {
$T [split_req] $T [split_ack]
}
||[word_access_start] {
;;[word_0] {
$T [rr] $T [ra] 
}
}
}
;;[array_obj_ref_31_Update] {
||[word_access_complete] {
;;[word_0] {
$T [cr] $T [ca] 
}
}
}
array_obj_ref_31_sample_start_ <-& (array_obj_ref_31_word_address_calculated)
array_obj_ref_31_sample_start_ &-> (array_obj_ref_31_Sample)
array_obj_ref_31_sample_completed_ <-& (array_obj_ref_31_Sample)
array_obj_ref_31_sample_completed_ &-> ($null)
array_obj_ref_31_update_start_ &-> (array_obj_ref_31_Update)
array_obj_ref_31_update_completed_ <-& (array_obj_ref_31_Update)
// start: Forward dependencies from data to transition array_obj_ref_31_sample_start_
// done: Forward dependencies from data to transition array_obj_ref_31_sample_start_
// end:  	default_mem_pool[((address * 1 ) + 0 )] := data $buffering 1// bits of buffering = 8. 

// load-store dependencies..
// memory-space  memory_space_1
//  array_obj_ref_31 store
}
} // end control-path
$DP { // begin data-path 
// constant-object-declarations for block %mem_store__
//  file ./.Aa//linked.opt.aa, line 21
// default_mem_pool[((address * 1 ) + 0 )]
// 1 
$constant $W[konst_27_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
// 0 
$constant $W[konst_29_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
$constant $W[array_obj_ref_31_resized_base_address] : $int<1> := _b0// 0
$constant $W[array_obj_ref_31_offset_scale_factor_0] : $int<1> := _b1// 1
$constant $W[array_obj_ref_31_word_offset_0] : $int<1> := _b0// 0
// 	default_mem_pool[((address * 1 ) + 0 )] := data $buffering 1// bits of buffering = 8. 

//  file ./.Aa//linked.opt.aa, line 26
// default_mem_pool[((address * 1 ) + 0 )]
// (address * 1 )
$intermediate $W[MUL_u32_u32_28_wire] : $int<32>
// ((address * 1 ) + 0 )
$intermediate $W[ADD_u32_u32_30_wire] : $int<32>
$intermediate $W[ADD_u32_u32_30_resized] : $int<1>
$intermediate $W[ADD_u32_u32_30_scaled] : $int<1>
$intermediate $W[array_obj_ref_31_final_offset] : $int<1>
$intermediate $W[array_obj_ref_31_root_address] : $int<1>
$W[array_obj_ref_31_word_address_0] : $pointer<memory_space_1>
$W[array_obj_ref_31_data_0] : $int<8>
// 	default_mem_pool[((address * 1 ) + 0 )] := data $buffering 1// bits of buffering = 8. 

//  file ./.Aa//linked.opt.aa, line 26
// default_mem_pool[((address * 1 ) + 0 )]
// (address * 1 )
*[MUL_u32_u32_28_inst] (address konst_27_wire_constant) (MUL_u32_u32_28_wire)   $flowthrough 
$delay MUL_u32_u32_28_inst 0
// ((address * 1 ) + 0 )
+[ADD_u32_u32_30_inst] (MUL_u32_u32_28_wire konst_29_wire_constant) (ADD_u32_u32_30_wire)   $flowthrough 
$delay ADD_u32_u32_30_inst 0
&/ [array_obj_ref_31_index_0_resize] (ADD_u32_u32_30_wire) (ADD_u32_u32_30_resized) 
 $flowthrough 
&/ [array_obj_ref_31_index_0_rename] (ADD_u32_u32_30_resized) (ADD_u32_u32_30_scaled) 
 $flowthrough 
&/ [array_obj_ref_31_index_offset] (ADD_u32_u32_30_scaled) (array_obj_ref_31_final_offset) 
 $flowthrough 
&/ [array_obj_ref_31_root_address_inst] (array_obj_ref_31_final_offset) (array_obj_ref_31_root_address) 
 $flowthrough 
&/ [array_obj_ref_31_addr_0] (array_obj_ref_31_root_address) (array_obj_ref_31_word_address_0) 
 $flowthrough 
$store [array_obj_ref_31_store_0] $to memory_space_1 (array_obj_ref_31_word_address_0 array_obj_ref_31_data_0) 
$delay array_obj_ref_31_store_0 4
&/ [array_obj_ref_31_gather_scatter] (data) (array_obj_ref_31_data_0) 
 $flowthrough 
} // end data-path
// 	default_mem_pool[((address * 1 ) + 0 )] := data $buffering 1// bits of buffering = 8. 

//  file ./.Aa//linked.opt.aa, line 26
// data
// ((address * 1 ) + 0 )
// (address * 1 )
// address
array_obj_ref_31_index_0_resize <=> (assign_stmt_33/array_obj_ref_31_index_resize_0/index_resize_req) (assign_stmt_33/array_obj_ref_31_index_resize_0/index_resize_ack)
array_obj_ref_31_index_0_rename <=> (assign_stmt_33/array_obj_ref_31_index_scale_0/scale_rename_req) (assign_stmt_33/array_obj_ref_31_index_scale_0/scale_rename_ack)
array_obj_ref_31_index_offset <=> (assign_stmt_33/array_obj_ref_31_final_index_sum_regn/req) (assign_stmt_33/array_obj_ref_31_final_index_sum_regn/ack)
array_obj_ref_31_root_address_inst <=> (assign_stmt_33/array_obj_ref_31_base_plus_offset/sum_rename_req) (assign_stmt_33/array_obj_ref_31_base_plus_offset/sum_rename_ack)
array_obj_ref_31_addr_0 <=> (assign_stmt_33/array_obj_ref_31_word_addrgen/root_register_req) (assign_stmt_33/array_obj_ref_31_word_addrgen/root_register_ack)
array_obj_ref_31_gather_scatter <=> (assign_stmt_33/array_obj_ref_31_Sample/array_obj_ref_31_Split/split_req) (assign_stmt_33/array_obj_ref_31_Sample/array_obj_ref_31_Split/split_ack)
array_obj_ref_31_store_0 <=> (assign_stmt_33/array_obj_ref_31_Sample/word_access_start/word_0/rr assign_stmt_33/array_obj_ref_31_Update/word_access_complete/word_0/cr) (assign_stmt_33/array_obj_ref_31_Sample/word_access_start/word_0/ra assign_stmt_33/array_obj_ref_31_Update/word_access_complete/word_0/ca)
}
$module [stage_1_daemon] {


// pipe-declarations for block %stage_1_daemon
//  file ./.Aa//linked.opt.aa, line 28
// pipe-declarations for block %stage_1_daemon%lOoP
//  file ./.Aa//linked.opt.aa, line 33
// pipe-declarations for block %stage_1_daemon%lOoP%
//  file ./.Aa//linked.opt.aa, line 35
// there are no memory spaces local to this module.
$CP { // begin control-path 
<>[branch_block_stmt_36] // Branch Block  file ./.Aa//linked.opt.aa, line 33
 {
$P [branch_block_stmt_36__entry__]
branch_block_stmt_36__entry__ <-| ($entry)
$P [branch_block_stmt_36__exit__]
branch_block_stmt_36__exit__ |-> ($exit)
$P [merge_stmt_37__entry__] 
$P [merge_stmt_37__exit__] 
$P [assign_stmt_40_to_assign_stmt_43__entry__] 
$P [assign_stmt_40_to_assign_stmt_43__exit__] 
$P [loopback]
::[assign_stmt_40_to_assign_stmt_43] {
// start:  		x := A $buffering 1// bits of buffering = 32. 

//  file ./.Aa//linked.opt.aa, line 37
// Source expression
// A
$T[RPIPE_A_39_sample_start_] 
$T[RPIPE_A_39_sample_completed_] 
$T[RPIPE_A_39_update_start_] 
$T[RPIPE_A_39_update_completed_] 
;;[RPIPE_A_39_Sample] { // pipe read sample
$T [rr] $T [ra] 
}
;;[RPIPE_A_39_Update] { // pipe read update
$T [cr] $T [ca] 
}
RPIPE_A_39_sample_start_ &-> (RPIPE_A_39_Sample)
RPIPE_A_39_sample_completed_ <-& (RPIPE_A_39_Sample)
RPIPE_A_39_update_start_ <-& (RPIPE_A_39_sample_completed_)
RPIPE_A_39_update_start_ &-> (RPIPE_A_39_Update)
RPIPE_A_39_update_completed_ <-& (RPIPE_A_39_Update)
// Target expression
// (as target) x
// start: WAR dependencies for x
// done: WAR dependencies for x
// end:  		x := A $buffering 1// bits of buffering = 32. 

// start:  		TMP := x $buffering 1// bits of buffering = 32. 

//  file ./.Aa//linked.opt.aa, line 38
// Source expression
// x
// Target expression
// (as target) TMP
$T[WPIPE_TMP_41_sample_start_] 
$T[WPIPE_TMP_41_sample_completed_] 
$T[WPIPE_TMP_41_update_start_] 
$T[WPIPE_TMP_41_update_completed_] 
;;[WPIPE_TMP_41_Sample] { // pipe write sample-start TMP
$T [req] $T [ack] 
}
;;[WPIPE_TMP_41_Update] { // pipe write update (complete) TMP
$T [req] $T [ack] 
}
WPIPE_TMP_41_sample_start_ &-> (WPIPE_TMP_41_Sample)
WPIPE_TMP_41_sample_completed_ <-& (WPIPE_TMP_41_Sample)
WPIPE_TMP_41_update_start_ <-& (WPIPE_TMP_41_sample_completed_)
WPIPE_TMP_41_update_start_ &-> (WPIPE_TMP_41_Update)
WPIPE_TMP_41_update_completed_ <-& (WPIPE_TMP_41_Update)
// start: Forward dependencies from x to transition WPIPE_TMP_41_sample_start_
WPIPE_TMP_41_sample_start_ <-& (RPIPE_A_39_update_completed_)
// done: Forward dependencies from x to transition WPIPE_TMP_41_sample_start_
// end:  		TMP := x $buffering 1// bits of buffering = 32. 

// load-store dependencies..
// pipe read/write dependencies for pipe A
// read-dependencies for pipe A
// write-dependencies for pipe A
// signal write dependencies for A
// pipe read/write dependencies for pipe TMP
// read-dependencies for pipe TMP
// write-dependencies for pipe TMP
// signal write dependencies for TMP
}
assign_stmt_40_to_assign_stmt_43__entry__ |-> (assign_stmt_40_to_assign_stmt_43)
assign_stmt_40_to_assign_stmt_43__exit__ <-| (assign_stmt_40_to_assign_stmt_43)
// control-path for merge  
//  file ./.Aa//linked.opt.aa, line 35
;;[merge_stmt_37_dead_link] { $T [dead_transition] $dead } 
merge_stmt_37__entry__ |-> (merge_stmt_37_dead_link)
merge_stmt_37__exit__ <-| (merge_stmt_37_dead_link)
//---------------------   merge statement  file ./.Aa//linked.opt.aa, line 35  --------------------------
||[merge_stmt_37__entry___PhiReq] {
// no phi statements in merge..
}
merge_stmt_37__entry__ |-> (merge_stmt_37__entry___PhiReq)
||[loopback_PhiReq] {
// no phi statements in merge..
}
loopback |-> (loopback_PhiReq)
$P [merge_stmt_37_PhiReqMerge] 
merge_stmt_37_PhiReqMerge <-| ( merge_stmt_37__entry___PhiReq  loopback_PhiReq )
||[merge_stmt_37_PhiAck] {
$T [dummy] 
}merge_stmt_37_PhiReqMerge |-> (merge_stmt_37_PhiAck)
merge_stmt_37__exit__  <-| (merge_stmt_37_PhiAck)
//---------------------  end of merge statement  file ./.Aa//linked.opt.aa, line 35  --------------------------
merge_stmt_37__entry__ <-| (branch_block_stmt_36__entry__)
assign_stmt_40_to_assign_stmt_43__entry__ <-| (merge_stmt_37__exit__)
loopback <-| (assign_stmt_40_to_assign_stmt_43__exit__)
} 
} // end control-path
$DP { // begin data-path 
// constant-object-declarations for block %stage_1_daemon%lOoP%
//  file ./.Aa//linked.opt.aa, line 35
// constant-object-declarations for block %stage_1_daemon%lOoP
//  file ./.Aa//linked.opt.aa, line 33
// constant-object-declarations for block %stage_1_daemon
//  file ./.Aa//linked.opt.aa, line 28
// constant-declarations for block %stage_1_daemon%lOoP
//  file ./.Aa//linked.opt.aa, line 33
// constant-declarations for block %stage_1_daemon%lOoP%
//  file ./.Aa//linked.opt.aa, line 35
// block %stage_1_daemon%lOoP
//  file ./.Aa//linked.opt.aa, line 33
// 		x := A $buffering 1// bits of buffering = 32. 

//  file ./.Aa//linked.opt.aa, line 37
// x
$W[x_40] : $int<32>
// 		TMP := x $buffering 1// bits of buffering = 32. 

//  file ./.Aa//linked.opt.aa, line 38
// TMP
// datapath-instances for block %stage_1_daemon%lOoP
//  file ./.Aa//linked.opt.aa, line 33
// 		x := A $buffering 1// bits of buffering = 32. 

//  file ./.Aa//linked.opt.aa, line 37
// A
$ioport $in [RPIPE_A_39_inst] (A) (x_40) 
 $buffering $out RPIPE_A_39_inst x_40 1
// 		TMP := x $buffering 1// bits of buffering = 32. 

//  file ./.Aa//linked.opt.aa, line 38
// TMP
$ioport $out [WPIPE_TMP_41_inst]  (x_40) (TMP) 
} // end data-path
// CP-DP links for merge  
//  file ./.Aa//linked.opt.aa, line 35
// 		x := A $buffering 1// bits of buffering = 32. 

//  file ./.Aa//linked.opt.aa, line 37
// A
RPIPE_A_39_inst <=> (branch_block_stmt_36/assign_stmt_40_to_assign_stmt_43/RPIPE_A_39_Sample/rr branch_block_stmt_36/assign_stmt_40_to_assign_stmt_43/RPIPE_A_39_Update/cr) (branch_block_stmt_36/assign_stmt_40_to_assign_stmt_43/RPIPE_A_39_Sample/ra branch_block_stmt_36/assign_stmt_40_to_assign_stmt_43/RPIPE_A_39_Update/ca)
// 		TMP := x $buffering 1// bits of buffering = 32. 

//  file ./.Aa//linked.opt.aa, line 38
// x
// TMP
WPIPE_TMP_41_inst <=> (branch_block_stmt_36/assign_stmt_40_to_assign_stmt_43/WPIPE_TMP_41_Sample/req branch_block_stmt_36/assign_stmt_40_to_assign_stmt_43/WPIPE_TMP_41_Update/req) (branch_block_stmt_36/assign_stmt_40_to_assign_stmt_43/WPIPE_TMP_41_Sample/ack branch_block_stmt_36/assign_stmt_40_to_assign_stmt_43/WPIPE_TMP_41_Update/ack)
}
